* Command line interface to PCI
    pci ls [bus:dev:fun|PCIID]      List one or all devices
    pci {r|w}{8|16|32} bus:dev:fun  Configuration space access
    pci {r|w}{8|16|32} ID           Configuration space access using PCIID
    pci config                      Print current configuration for static lib
















#if 0

int shell_pci_r8(int argc, char *argv[])
{
  unsigned long pciid, offset;
  uint8_t data;
  int result;

  if (argc != 4)
    return -1;

  pciid = get_pciid_from_string(argv[2]);
  if (pciid == ~0)
    return -1;

  offset = strtoul(argv[3], NULL, 0);
  if (offset == ULONG_MAX)
    return -1;

  result = pci_cfg_r8(pciid, offset, &data);
  switch (result) {
    default:
    case PCISTS_OK:
      printf(" r8[0x%02lx]: HEX=0x%02x  DEC=%d\n", offset, data, data);
      break;

    case PCISTS_ERR:
    case PCISTS_EINVAL:
      puts(" Bad input argument\n");
      return PCISTS_EINVAL;

    case PCISTS_MSTABRT:
      puts(" Master abort while reading configuration space");
      return PCISTS_MSTABRT;
  }

  return 0;
}

int shell_pci_r16(int argc, char *argv[])
{
  unsigned long pciid, offset;
  uint16_t data;
  int result;

  if (argc != 4)
    return -1;

  pciid = get_pciid_from_string(argv[2]);
  if (pciid == ~0)
    return -1;

  offset = strtoul(argv[3], NULL, 0);
  if (offset == ULONG_MAX)
    return -1;

  result = pci_cfg_r16(pciid, offset, &data);
  switch (result) {
    default:
    case PCISTS_OK:
      printf(" r16[0x%02lx]: HEX=0x%04x  DEC=%d\n", offset, data, data);
      break;

    case PCISTS_ERR:
    case PCISTS_EINVAL:
      puts(" Bad input argument\n");
      return PCISTS_EINVAL;

    case PCISTS_MSTABRT:
      puts(" Master abort while reading configuration space");
      return PCISTS_MSTABRT;
  }

  return 0;
}

int shell_pci_r32(int argc, char *argv[])
{
  unsigned long pciid, offset;
  uint32_t data;
  int result;

  if (argc != 4)
    return -1;

  pciid = get_pciid_from_string(argv[2]);
  if (pciid == ~0)
    return -1;

  offset = strtoul(argv[3], NULL, 0);
  if (offset == ULONG_MAX)
    return -1;

  result = pci_cfg_r32(pciid, offset, &data);
  switch (result) {
    default:
    case PCISTS_OK:
      printf(" r32[0x%02lx]: HEX=0x%08lx  DEC=%lu\n", offset, data, data);
      break;

    case PCISTS_ERR:
    case PCISTS_EINVAL:
      puts(" Bad input argument\n");
      return PCISTS_EINVAL;

    case PCISTS_MSTABRT:
      puts(" Master abort while reading configuration space");
      return PCISTS_MSTABRT;
  }

  return 0;
}

int shell_pci_w8(int argc, char *argv[])
{
  unsigned long pciid, offset, data;
  int result;

  if (argc != 5)
    return -1;

  pciid = get_pciid_from_string(argv[2]);
  if (pciid == ~0)
    return -1;

  offset = strtoul(argv[3], NULL, 0);
  if (offset == ULONG_MAX)
    return -1;

  data = strtoul(argv[4], NULL, 0);
  if (offset == ULONG_MAX)
    return -1;
  if (data > 0xff)
    return -1;

  result = pci_cfg_w8(pciid, offset, data);
  switch (result) {
    default:
    case PCISTS_OK:
      printf(" w8[0x%02lx]: HEX=0x%02lx  DEC=%lu\n", offset, data, data);
      break;

    case PCISTS_ERR:
    case PCISTS_EINVAL:
      puts(" Bad input argument\n");
      return PCISTS_EINVAL;

    case PCISTS_MSTABRT:
      puts(" Master abort while writing configuration space");
      return PCISTS_MSTABRT;
  }

  return 0;
}

int shell_pci_w16(int argc, char *argv[])
{
  unsigned long pciid, offset, data;
  int result;

  if (argc != 5)
    return -1;

  pciid = get_pciid_from_string(argv[2]);
  if (pciid == ~0)
    return -1;

  offset = strtoul(argv[3], NULL, 0);
  if (offset == ULONG_MAX)
    return -1;

  data = strtoul(argv[4], NULL, 0);
  if (offset == ULONG_MAX)
    return -1;
  if (data > 0xffff)
    return -1;

  result = pci_cfg_w16(pciid, offset, data);
  switch (result) {
    default:
    case PCISTS_OK:
      printf(" w16[0x%02lx]: HEX=0x%04lx  DEC=%lu\n", offset, data, data);
      break;

    case PCISTS_ERR:
    case PCISTS_EINVAL:
      puts(" Bad input argument\n");
      return PCISTS_EINVAL;

    case PCISTS_MSTABRT:
      puts(" Master abort while writing configuration space");
      return PCISTS_MSTABRT;
  }

  return 0;
}

int shell_pci_w32(int argc, char *argv[])
{
  unsigned long pciid, offset, data;
  int result;

  if (argc != 5)
    return -1;

  pciid = get_pciid_from_string(argv[2]);
  if (pciid == ~0)
    return -1;

  offset = strtoul(argv[3], NULL, 0);
  if (offset == ULONG_MAX)
    return -1;

  data = strtoul(argv[4], NULL, 0);
  if (offset == ULONG_MAX)
    return -1;

  result = pci_cfg_w32(pciid, offset, data);
  switch (result) {
    default:
    case PCISTS_OK:
      printf(" w32[0x%02lx]: HEX=0x%08lx  DEC=%lu\n", offset, data, data);
      break;

    case PCISTS_ERR:
    case PCISTS_EINVAL:
      puts(" Bad input argument\n");
      return PCISTS_EINVAL;

    case PCISTS_MSTABRT:
      puts(" Master abort while writing configuration space");
      return PCISTS_MSTABRT;
  }

  return 0;
}

#endif
